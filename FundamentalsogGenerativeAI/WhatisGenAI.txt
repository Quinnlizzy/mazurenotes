What is generative AI?

AI imitates human behavior by using ML to interact with the environment & execute tasks without explicit directions on output.

Gen AI describes category of capabilities within AI that create original content. 
People typically interact with gen AI that has been built into chat applications.

Generative AI apps take in natural language input & return appropriate responses in variety of formats 
        natural language
        images
        code

Natural language generation
Gen natural language response, you might submit a request such as "Give me three ideas for a healthy breakfast including peppers."

Image generation
Some applications can interpret a natural language request & generate an appropriate image.
E.g. you might submit a request like "Create an image of an elephant eating a burger".
Gen AI app could then return an original new image based on description 

Code generation
Some genAI applications are designed to help software developers write code. 
e.g. For example, you could submit a request like "Show me how to code a game of tic-tac-toe with Python" and generate the following response:

"Sure, here's some basic code for a Tic-Tac-Toe game in Python:


Copy
board = [' ' for x in range(9)]  
  
def print_board():  
    row1 = '| {} | {} | {} |'.format(board[0], board[1], board[2])  
    row2 = '| {} | {} | {} |'.format(board[3], board[4], board[5])  
    row3 = '| {} | {} | {} |'.format(board[6], board[7], board[8])  
    print()  
    print(row1)  
    print(row2)  
    print(row3)  
    print()  
  
def player_move(icon):  
    if icon == 'X':  
        number = 1  
    elif icon == 'O':  
        number = 2  
    print('Your turn player {}'.format(number))  
    choice = int(input('Enter your move (1-9): ').strip())  
    if board[choice - 1] == ' ':  
        board[choice - 1] = icon  
    else:  
        print()  
        print('That space is taken!')  
  
def is_victory(icon):  
    if (board[0] == icon and board[1] == icon and board[2] == icon) or \  
       (board[3] == icon and board[4] == icon and board[5] == icon) or \  
       (board[6] == icon and board[7] == icon and board[8] == icon) or \  
       (board[0] == icon and board[3] == icon and board[6] == icon) or \  
       (board[1] == icon and board[4] == icon and board[7] == icon) or \  
       (board[2] == icon and board[5] == icon and board[8] == icon) or \  
       (board[0] == icon and board[4] == icon and board[8] == icon) or \  
       (board[2] == icon and board[4] == icon and board[6] == icon):  
        return True  
    else:  
        return False  
  
def is_draw():  
    if ' ' not in board:  
        return True  
    else:  
        return False  
  
while True:  
    print_board()  
    player_move('X')  
    print_board()  
    if is_victory('X'):  
        print('X Wins! Congratulations!')  
        break  
    elif is_draw():  
        print('The game is a draw!')  
        break  
    player_move('O')  
    if is_victory('O'):  
        print_board()  
        print('O Wins! Congratulations!')  
        break  
    elif is_draw():  
        print('The game is a draw!')  
        break  
